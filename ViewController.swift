//
//  ViewController.swift
//  CoreDataExample
//
//  Created by Eclectics on 22/03/2022.
//

import UIKit

class ViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {
    
    //The persistent container gives us a property called viewContext , which is a managed object context: an environment where we can manipulate(CRUD) Core Data objects entirely in RAM
    
    let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext
    
    //create tableView
    let tableView: UITableView = {
        let table = UITableView()
        table.register(UITableViewCell.self,
                       forCellReuseIdentifier: "cell")
        return table
    }()
    
    private var models = [ToDoListItem]()

    override func viewDidLoad() {
        super.viewDidLoad()
        title = "CoreData To Do List"
        
        //add the table view as a subview
        view.addSubview(tableView)
        //get all items from db
        getAllItems()
        tableView.delegate = self
        tableView.dataSource = self
        tableView.frame = view.bounds
        
        //add button at the top
        navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(didTapAdd))
    }
    
    @objc private func didTapAdd(){
        //show alert with text field
        let alert = UIAlertController(title: "New Item", message: "Enter new item", preferredStyle: .alert)
        
        //create a text view in the alert
        alert.addTextField(configurationHandler: nil)
        
        alert.addAction(UIAlertAction(title: "Submit", style: .cancel, handler: { [weak self] _ in
            guard let field = alert.textFields?.first, let text = field.text, !text.isEmpty else{
                return
            }
            
            //call function to save task to db
            self?.createItem(name: text)
        }))
        present(alert, animated: true)
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        //number of rows
        return models.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let model = models[indexPath.row]
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath)
        //cell.textLabel?.text = "\(model.name) - \(model.createdAt)"
        cell.textLabel?.text = model.name
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        
        //get the item we selected
        let item = models[indexPath.row]
        
        //delete or edit sheet
        let sheet = UIAlertController(title: "Edit", message: nil, preferredStyle: .actionSheet)
        
        sheet.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: nil))
        
        sheet.addAction(UIAlertAction(title: "Edit", style: .default, handler: {[weak self] _ in
            
            let alert = UIAlertController(title: "Edit Item", message: "Edit your item", preferredStyle: .alert)
            
            //create a text view in the alert
            alert.addTextField(configurationHandler: nil)
            //assign what you wnat to edit to the text view
            alert.textFields?.first?.text = item.name
            alert.addAction(UIAlertAction(title: "Save", style: .cancel, handler: { [weak self] _ in
                guard let field = alert.textFields?.first, let newName = field.text, !newName.isEmpty else{
                    return
                }
                
                //call function to save task to db
                self?.updateItem(item: item, newName: newName)
            }))
            self?.present(alert, animated: true)
            
            
        }))
        //destructive gives you a red title
        sheet.addAction(UIAlertAction(title: "Delete", style: .destructive, handler: { [weak self] _ in
            self?.deleteItem(item: item)
            
        }))
        present(sheet, animated: true)
    }

    //Core data
    func getAllItems(){
        //ToDoListItem.fetchRequest() was autogenerated
        //getting data from db
        do{
        models = try context.fetch(ToDoListItem.fetchRequest())
            //anything UI related should be dobe on the main thread
            DispatchQueue.main.async {
                self.tableView.reloadData()
            }
            
        }
        catch{
            //handle errors
        }
    }
    
    func createItem(name: String){
        let newItem = ToDoListItem(context: context)
        //assign properties
        newItem.name = name
        newItem.createdAt = Date()
        
        //save to db
        do{
            try context.save()
            //get all items from db
            getAllItems()
        }catch{
            
        }
        
    }
    
    func deleteItem(item: ToDoListItem){
        context.delete(item)
        
        do{
            try context.save()
            //reload table and get new data
            getAllItems()
        }catch{
            
        }
        
    }
    
    
    func updateItem(item: ToDoListItem, newName: String){
        item.name = newName
        do{
            try context.save()
            //reload table and get new data
            getAllItems()
        }catch{
            
        }
        
    }

}

